#!/bin/env
# -*- coding: utf-8 -*-
# @website: https://loovien.github.io
# @author: luowen<bigpao.luo@gmail.com>
# @time: 2018/7/27 14:06
# @desc:

import time, os, shutil,base64, logging

from os import path
from app.dbutils import DbUtils
from app.cronjob import CronJob
from app.ftputils import FtpUtils

def maplab():
    list1 = [1, 2, 3, 4]
    y = "luowen"
    a = map(lambda x: "({},{})".format(x, int(time.time())), list1)
    print(",".join(list(a)))


def move_file():
    files = os.listdir("d:/vim")
    print(files)
    for file in files:
        absfile = os.path.join("d:/vim", file)
        a = os.path.isdir(absfile)
        print("文件%s是否是目录: %s", file, a)
        # shutil.move(file, "d:/test.py")

def write_file():
    CronJob.import_to_db()

def dump_from_db():
    CronJob.dump_from_db()

def deencode():

    bk = open("test.py.bak", "rb+")
    c = b"".join(bk.readlines())
    a = base64.decodebytes(c)
    print(a)


def read_file():
    fd = open("./test.py", "rb+")
    c = b''.join(fd.readlines())
    fd.close()
    print(c)

def sftp_download():
    FtpUtils.download_sftp()


def ftp_download():
    FtpUtils.download_ftp()


def demo():
    a = "0x622749794576596D6C754C3256756467304B497941744B6930675932396B6157356E4F694231644759744F4341744B69304E43694D675148646C596E4E7064475536494768306448427A4F6938760A62473976646D6C6C6269356E6158526F645749756157384E43694D675147463164476876636A6F67624856766432567550474A705A33426862793573645739415A32316861577775593239740A5067304B4979424164476C745A546F674D6A41784F4338334C7A4933494445304F6A413244516F6A4945426B5A584E6A4F67304B4451707062584276636E516764476C745A53776762334D730A49484E6F645852706241304B4451706D636D39744947397A49476C7463473979644342775958526F4451706D636D3974494746776343356B596E56306157787A49476C7463473979644342450A596C56306157787A4451706D636D3974494746776343356A636D3975616D396949476C746347397964434244636D3975536D39694451706D636D3974494746776343356D6448423164476C730A6379427062584276636E5167526E52775658527062484D4E4367304B4451706B5A57596762574677624746694B436B3644516F674943416762476C7A64444567505342624D5377674D6977670A4D7977674E46304E436941674943423549443067496D78316233646C6269494E436941674943426849443067625746774B47786862574A6B595342344F6941694B4874394C4874394B5349750A5A6D3979625746304B48677349476C75644368306157316C4C6E52706257556F4B536B704C43427361584E304D536B4E4369416749434277636D6C75644367694C434975616D3970626968730A61584E304B4745704B536B4E4367304B4451706B5A575967625739325A56396D6157786C4B436B3644516F67494341675A6D6C735A584D67505342766379357361584E305A476C794B434A6B0A4F693932615730694B51304B4943416749484279615735304B475A706247567A4B51304B4943416749475A766369426D6157786C49476C7549475A706247567A4F67304B49434167494341670A49434268596E4E6D6157786C4944306762334D75634746306143357162326C754B434A6B4F693932615730694C43426D6157786C4B51304B4943416749434167494342684944306762334D750A63474630614335706332527063696868596E4E6D6157786C4B51304B494341674943416749434277636D6C756443676935706148354C75324A58506D6D4B2F6C6B4B626D6D4B2F6E6D36376C0A765A55364943567A496977675A6D6C735A53776759536B4E4369416749434167494341674979427A6148563061577775625739325A53686D6157786C4C4341695A446F766447567A644335770A6553497044516F4E436D526C5A694233636D6C305A56396D6157786C4B436B3644516F4E4369416749434244636D3975536D39694C6D6C7463473979644639306231396B5969677044516F670A49434167636D563064584A7544516F67494341675A6D6C735A584D67505342766379357361584E305A476C794B434A6B4F693932615730694B51304B44516F67494341675A6D397949475A700A62475567615734675A6D6C735A584D3644516F6749434167494341674947466963325A7062475567505342775958526F4C6D4669633342686447676F5A6D6C735A536B4E43694167494341670A494341676157596763474630614335706332527063696868596E4E6D6157786C4B546F4E4369416749434167494341674943416749474E76626E5270626E566C44516F6749434167494341670A49454E796232354B623249756157317762334A3058335276583252694B436B4E4367304B4451706B5A575967636D56685A46396D6157786C4B436B3644516F67494341675A6D5167505342760A634756754B4349754C33526C6333517563486B694C434169636D497249696B4E436941674943426A494430675969636E4C6D70766157346F5A6D5175636D56685A477870626D567A4B436B700A44516F67494341675A6D5175593278766332556F4B51304B4943416749484279615735304B474D7044516F4E436D526C5A69427A5A6E527758325276643235736232466B4B436B3644516F670A49434167526E52775658527062484D755A473933626D78765957526663325A306343677044516F4E4367304B5A47566D49475A306346396B62336475624739685A4367704F67304B494341670A49455A30634656306157787A4C6D5276643235736232466B58325A306343677044516F4E4367304B61575967583139755957316C5831386750543067496C396662574670626C3966496A6F4E0A436941674943416A49475A306346396B62336475624739685A43677044516F67494341674979427A5A6E527758325276643235736232466B4B436B4E436941674943416A49484A6C595752660A5A6D6C735A53677044516F674943416764334A70644756665A6D6C735A53677044516F4E4367304B0A27"
    c = base64.decodebytes(a)
    print(c)

if __name__ == "__main__":
    # ftp_download()
    # sftp_download()
    # read_file()
    # write_file()
    dump_from_db()
    # deencode()
    # demo()

    # print("utfmb4".encode("iso-8859-1"))

    # file = "./tmp/dl/a.ttf"
    # c = open(file, 'rb+')
    # lines = c.readlines()
    # c.close()
    # print(b''.join(lines))

